/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.Point;
import java.awt.RenderingHints;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

/**
 *
 * @author TechTac
 */
public class PnlNtf extends javax.swing.JPanel {

    public CustomLbl lblMsg;
    GridBagConstraints gridBagConstraints;
    /**
     * Creates new form OLPanel
     */
    @Override
    public boolean contains(int x, int y) {
        Component[] components = getComponents();
        for (int i = 0; i < components.length; i++) {
            Component component = components[i];
            Point containerPoint = SwingUtilities.convertPoint(
                    this,
                    x, y,
                    component);
            if (component.contains(containerPoint)) {
                return true;
            }
        }
        return false;
    }
            
    public PnlNtf() {
        initComponents();
        jLabel2.setVisible(false);
        
        lblMsg = new CustomLbl() {
        };

        lblMsg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        lblMsg.setBackground(new java.awt.Color(102, 102, 102));

        lblMsg.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        lblMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        //jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/printing_test/res/rjt.png"))); // NOI18N

        lblMsg.setText("Magnet link copied!");

        lblMsg.setOpaque(false);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 34;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 16, 18);
        add(lblMsg, gridBagConstraints);
        //setBackground(new Color(0,0,0,20));
        lblMsg.setAlpha(0.0f);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 0.1;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(filler2, gridBagConstraints);

        jLabel2.setBackground(new java.awt.Color(0, 90, 0));
        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Magnet link copied!");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setOpaque(true);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 34;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 16, 18);
        add(jLabel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_jLabel2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.Box.Filler filler1;
    protected javax.swing.Box.Filler filler2;
    protected javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}

class CustomLbl extends JLabel {

   private float alpha = 1f;


    public void setAlpha(float value) {
        if (alpha != value) {
            alpha = Math.min(Math.max(0f, value), 1f);
            //setOpaque(alpha == 1.0f);
            repaint();
            //System.out.println(Math.round(255 * alpha));
            setForeground(new Color(255,255,255,Math.round(255 * alpha)));
        }
    }

    public float getAlpha() {
        return alpha;
    }

    
    @Override
    protected void paintComponent(Graphics g) {
         
        
        Graphics2D g2d = (Graphics2D) g.create();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
        g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
        g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
        g2d.setComposite(AlphaComposite.SrcOver.derive(getAlpha()));
        int shade = 0;
        int topOpacity = 80;
        int pixels = 6;
        
        for (int i = 0; i < pixels; i++) {
            g2d.setColor(new Color(shade, shade, shade, ((topOpacity / pixels) * i)));
            //g2d.drawRect(i, i, (this.getWidth()) - ((i * 2) + 1), (this.getHeight()) - ((i * 2) + 1));
            g2d.drawRoundRect(i, i, (this.getWidth()) - ((i * 2) + 1), (this.getHeight()) - ((i * 2) + 1), 10, 10);
        }        
        g2d.setColor(getBackground()); 
        g2d.fillRoundRect(5, 5, getWidth()-11, getHeight()-11, 10, 10);
        g2d.dispose();
        
        super.paintComponent(g);

    }
}